{"version":3,"sources":["services/signIn.js","containers/auth/SignIn.js","services/createCustomerService.js","containers/CustomerForm.js","App.js","serviceWorker.js","index.js"],"names":["user","a","axios","post","returnSecureToken","fbuser","signInService","Form","styled","div","SignIn","onSignIn","useState","setUser","handleSignIn","data","idToken","Fragment","TextField","value","email","onChange","target","u","label","password","type","Button","variant","color","onClick","customer","fbCustomer","createCustomerService","CustomerForm","appState","setCustomer","handleCreateCustomer","console","log","name","address","JSON","stringify","App","setAppState","className","s","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed727c2a.chunk.js","sourcesContent":["import axios from 'axios';\n\nasync function signInService(user) {\n\n    const fbuser = await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDxggzPT57iqEo-tohF6HqdpYj4YmIopnM', { ...user, returnSecureToken: true });\n    return fbuser;\n};\n\nexport default signInService;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components'\nimport signInService from '../../services/signIn';\n\n\nconst SignIn = ({onSignIn}) => {\n    const [user, setUser] = useState({});\n\n    const handleEmailChange = ({ target }) => {\n        setUser(u => u = { ...u, email: target.value });\n    }\n\n    const handlePasswordChange = ({ target }) => {\n        setUser(u => u = { ...u, password: target.value });\n    }\n\n    const handleSignIn = async () => {\n        const fbuser = await signInService(user);\n        onSignIn(fbuser.data.idToken);\n    }\n\n    return (\n        <React.Fragment>\n            <Form>\n                <TextField value={user.email} onChange={handleEmailChange} label=\"Email\" />\n                <TextField value={user.password} onChange={handlePasswordChange} type=\"password\" label=\"Password\" />\n                <Button variant=\"contained\" color='primary' onClick={handleSignIn}> Login </Button>\n            </Form>\n        </React.Fragment>\n    )\n}\n\n\nconst Form = styled.div`\ndisplay: flex;\nheight: 30vh;\nflex-direction: column;\nwidth: 40%;\njustify-content: space-around;\nalign-items: center;\nmargin: 10px auto;\n\n`\n\nexport default SignIn;","import axios from 'axios';\n\nasync function createCustomerService(idToken, customer) {\n\n    const fbCustomer = await axios.post('https://my-project-1486841534385.firebaseio.com/HajOnSoft/customer.json?auth=' + idToken, customer);\n    return fbCustomer;\n};\n\nexport default createCustomerService;\n","import React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components'\nimport createCustomerService from '../services/createCustomerService';\n\n\nconst CustomerForm = ({appState}) => {\n    const [customer, setCustomer] = useState({});\n\n    const handleNameChange = ({ target }) => {\n        setCustomer(u => u = { ...u, name: target.value });\n    }\n\n    const handleAddressChange = ({ target }) => {\n        setCustomer(u => u = { ...u, address: target.value });\n    }\n\n    const handleCreateCustomer = async () => {\n        const fbuser = await createCustomerService(appState.idToken, customer);\n        console.log(fbuser);\n        // setCustomer(fbuser);\n    }\n\n    return (\n        <React.Fragment>\n            <Form>\n                <TextField value={customer.name} onChange={handleNameChange} label=\"Name\" />\n                <TextField value={customer.address} onChange={handleAddressChange} label=\"Address\" />\n                <Button variant=\"contained\" color='primary' onClick={handleCreateCustomer}> Create Customer </Button>\n            </Form>\n\n            {JSON.stringify(customer)}\n        </React.Fragment>\n    )\n}\n\n\nconst Form = styled.div`\ndisplay: flex;\nheight: 30vh;\nflex-direction: column;\nwidth: 40%;\njustify-content: space-around;\nalign-items: center;\nmargin: 10px auto;\n\n`\n\nexport default CustomerForm;","import React, { useState } from 'react';\nimport './App.css';\n// import SignUp from './containers/auth/SignUp';\nimport SignIn from './containers/auth/SignIn';\nimport CustomerForm from './containers/CustomerForm';\n\nfunction App() {\n  const [appState, setAppState] = useState({});\n  \n  const handleSignIn = (idToken)=> {\n    setAppState(s=> s = {...appState, idToken});\n  }\n  return (\n    <div className=\"App\">\n      {\n        appState.idToken ? <CustomerForm  appState={appState}/> : <SignIn onSignIn={handleSignIn} />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}